[{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"First Last. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Last F (2023). ma206equations: Package (One Line, Title Case). R package version 0.0.0.9000.","code":"@Manual{,   title = {ma206equations: What the Package Does (One Line, Title Case)},   author = {First Last},   year = {2023},   note = {R package version 0.0.0.9000}, }"},{"path":"/index.html","id":"title","dir":"","previous_headings":"","what":"Title","title":"What the Package Does (One Line, Title Case)","text":"Building R package deliver easy--use equations prose plots intro statistics probability curricula","code":""},{"path":"/index.html","id":"abstract","dir":"","previous_headings":"","what":"Abstract","title":"What the Package Does (One Line, Title Case)","text":"Mathematical fluency involves frequent use equations. However, typing equations use electronic documents can tedious. classroom setting set curriculum, set equations mastered well defined. shortcuts produce set equations prose plots beneficial students instructors alike. goal independent study create functions quickly deliver typed versions equations translate beautiful printed versions. store typed versions thoughtfully crafted R functions make typed equations easily accessible. functions bundled R package.","code":""},{"path":"/index.html","id":"the-problem","dir":"","previous_headings":"","what":"What the Package Does (One Line, Title Case)","title":"What the Package Does (One Line, Title Case)","text":"Using mathematical notation powerful way communicate probabilistic statistical concept. notation combined data visualization descriptive prose power even greater. However, using equations contexts often done typing typesetting version equation may awkward. Consider probability density function normal distribution, centered  standard deviation : [drop rendered version ] typed version equation follows distant cousin beautiful rendered kin : p(x) = \\frac{1}{\\sqrt{ 2 \\pi \\sigma^2 }} e^{ - \\frac{ (x - \\mu)^2 } {2 \\sigma^2} } Furthermore, want use annotate plot equation, need use plot math, different typed syntax. p(x) * {phantom() == phantom()} * frac(1, sqrt(2*pi*sigma^{2}, )) * phantom(.)*e^{phantom() - frac((x - mu)^{2}, 2*sigma^{2})}","code":"math_plot_normal <- \"p(x) * {phantom() == phantom()} * frac(1, sqrt(2*pi*sigma^{2}, )) * phantom(.)*e^{phantom() - frac((x - mu)^{2}, 2*sigma^{2})} \"  library(ggplot2) ggxmean:::stamp_space() +    annotate(geom = \"label\",             label = math_plot_normal,            parse = T,            x = 2, y = .3) +    ggxmean::stamp_normal_dist() +    ggstamp::stamp_text_ljust(label = \"What is the max of this function?\",                       x = -4,                        y = .44)"},{"path":"/index.html","id":"a-different-work-flow-within-intro-probability-and-statistics-course-work","dir":"","previous_headings":"","what":"A different work flow within intro probability and statistics course work…","title":"What the Package Does (One Line, Title Case)","text":"call function get back text render beautiful equations. example function like return_equation_normal() called get typed version prose stamp_eq_normal() use ggplot2.","code":"library(ggplot2) ggxmean:::stamp_space() +    stamp_equation_normal()"},{"path":[]},{"path":"/index.html","id":"details-of-our-implementation","dir":"","previous_headings":"","what":"Details of Our Implementation","title":"What the Package Does (One Line, Title Case)","text":"equations plot produce following fashion (functions package pre-built):   \\sqrt{3x-1}+(1+x)^2 , \\alpha","code":"code <- readLines(\"R/functions.R\") # Some functions here equation_z_stat_md <- \"$z=\\\\frac{\\\\hat{p}-\\\\pi}{SD_{null}}$, where $SD_{null}=\\\\sqrt{\\\\frac{\\\\pi_{0}*(1-\\\\pi_{0})}{n}}$\"  equation_z_stat_plot <- latex2exp::TeX(equation_z_stat_md)  equation_conf_interval_z_md <- \"$CI = \\\\hat{p}\\\\pm Multiplier*SE$, where $SE = \\\\sqrt{\\\\frac{\\\\hat{p}*(1-\\\\hat{p})}{n}}$\"  equation_conf_interval_z_plot <- latex2exp::TeX(equation_conf_interval_z_md)   library(tidyverse)  ggplot() +   annotate(\"label\",             x = 0, y = 0,             label = equation_z_stat_plot,             color = \"grey25\", size = 4) ggplot() +   annotate(\"label\",             x = 0, y = 0,             label = equation_conf_interval_z_plot,             color = \"grey25\", size = 4)"},{"path":"/index.html","id":"how-do-we-write-a-package","dir":"","previous_headings":"","what":"How do we write a package?","title":"What the Package Does (One Line, Title Case)","text":"still follow steps outlined data package readme: https://github.com/EvaMaeRey/tidytitanic well consult package building guide: https://evamaerey.github.io/package_in_20_minutes/package_in_20_minutes","code":""},{"path":"/index.html","id":"which-equations-are-relevant-for-the-statistics-and-probability-course","dir":"","previous_headings":"","what":"Which equations are relevant for the statistics and probability course?","title":"What the Package Does (One Line, Title Case)","text":"good start looking core equations used ma206 code annex: Rendered: https://evamaerey.github.io/ma206/code_annex.html Source: https://github.com/EvaMaeRey/ma206/blob/master/code_annex.Rmd Result quickly include relevant formulas plots (like ggplot looks proposal 1/3 null hypothesis proportion) .rmd documents.","code":""},{"path":[]},{"path":"/index.html","id":"how-do-we-collaborate-and-share-the-package","dir":"","previous_headings":"","what":"How do we collaborate and share the package?","title":"What the Package Does (One Line, Title Case)","text":"create github account collaboration https://github.com/ ’ll make repository available account","code":"plotmath_ev <- latex2exp::TeX(\"$E[X] = x_1p_1 + x_2p_2 + x_3p_3 ...x_np_n = \\\\sum_1^n{x_ip_i}$\") plotmath_var <- latex2exp::TeX(\"$Var(X) = E[(X-\\\\mu)^2] = \\\\sigma^2_x = \\\\sum_1^n(x_i-\\\\mu)^2p_i$\") plotmath_sd <- latex2exp::TeX(\"$\\\\sigma_x = SD(X) = \\\\sqrt{Var(X)}$\")    ### stamp equation example stamp_one_plus_one <- function(x = 0, y = 0, ...){    annotate(geom = \"text\",            label = \"1 + 1\",            parse = T,            x = x, y = y, ...)  }  library(tidyverse) ggplot2::ggplot() +   stamp_one_plus_one() +   stamp_one_plus_one(size = 12, y = 2) tibble::tibble(event = c(\"totaled\", \"fender bender\", \"accident free\"),        probability = c(.01, .09, .9),        payout = c(20000, 5000, 0)) ->   expected   expected %>%   ggplot() +   aes(x = payout, y = probability) +   geom_point() +   geom_segment(aes(xend = payout, yend = 0)) +   geom_text(aes(label = probability), size = 5,             vjust = -.5, color = \"black\") +   geom_vline(xintercept = sum(c(.01*20000, .09*5000)),              linetype = \"dashed\", color = \"black\") +   labs(subtitle = \"Course idea 8:  The expected value E.V. is the 'balancing point' of a Random variable, X.  It is the weighted average of values, (weighting values by their probabilities). In large samples from the X, the average will be close to the E.V.;\" %>% str_wrap(60)) +   annotate(geom = \"label\", x =sum(c(.01*20000, .09*5000)), label = sum(c(.01*20000, .09*5000)), y = .5 ) +   scale_y_continuous(limits = c(0,1)) +   annotate(geom = \"text\", label = \"E * '[' *X * ']' * {phantom() == phantom()} * x[1]*p[1] + x[2]*p[2] + x[3]*p[3]*...x[n]*p[n] * {phantom() == phantom()} * sum(x[i]*p[i], 1, n) \", parse = T,            x = 12000, y = .95) +   annotate(geom = \"text\", label = \"Var(X) * {phantom() == phantom()} * E * '[' *(X - mu)^{2} * ']' * {phantom() == phantom()} * sigma[x]^{2} * {phantom() == phantom()} * sum(, 1, n)*(x[i] - mu)^{2}*p[i] \", parse = T,            x = 12000, y = .8) +   annotate(geom = \"text\", label = \"sigma[x] * {phantom() == phantom()} * SD(X) * {phantom() == phantom()} * sqrt(Var(X), ) \", parse = T,            x = 12000, y = .65) stamp_eq_ev <- function(x = 0,  y = 0){    # your work here  }   stamp_eq_var <- function(x = 0,  y = 0){    # your work here  }  stamp_eq_sd <- function(x = 0,  y = 0){    # your work here  }    ggplot() +   stamp_eq_ev() +   stamp_eq_var(y = -1)+   stamp_eq_sd(y = -2)"}]
